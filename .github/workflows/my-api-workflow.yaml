name: my-api-workflow

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}" 
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
          outputs: type=docker,dest=/tmp/myimage.tar
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  code-review:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: 
      - build
      - code-review
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - 
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}"
      - 
        name: Run unit test
        run: |
          docker run --rm --name test krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} sh -c "flask test"

  push-image:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
    if: ${{ github.ref == 'refs/heads/main' }} || ${{ github.ref == 'refs/heads/development' }}
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}"
      -
        name: push image
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
            docker tag krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} krojas4/my-api:latest
            docker push krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
            docker push krojas4/my-api:latest
      -
        name: push image
        if: ${{ github.ref == 'refs/heads/development' }}
        run: |
            docker tag krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} krojas4/my-api:development-latest
            docker push krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
            docker push krojas4/my-api:development-latest

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/main' }} || ${{ github.ref == 'refs/heads/development' }}
    needs: 
      - test
      - push-image
    env:
      GKE_CLUSTER: my-api-cluster 
      GKE_ZONE: us-central1-c 

    steps:

      # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GKE_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

      # Configure docker to use the gcloud command-line tool as a credential helper
      - run: |-
          gcloud --quiet auth configure-docker

      # Get the GKE credentials so we can deploy to the cluster
      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}
      - 
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}"

      # Set up kustomize
      - name: Set up Kustomize
        run: |-
          curl --location https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.2.0/kustomize_v4.2.0_linux_amd64.tar.gz | tar xz
          chmod u+x ./kustomize

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |-
          ./kustomize edit set image krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/my-api --namespace production
          kubectl get services -o wide
      - name: Deploy
        if: ${{ github.ref == 'refs/heads/development' }}
        run: |-
          ./kustomize edit set image krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/my-api --namespace development
          kubectl get services -o wide
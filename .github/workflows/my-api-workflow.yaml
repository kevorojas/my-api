name: my-api-workflow

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checkout
        uses: actions/checkout@v2
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}" 
      -
        name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          tags: krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
          outputs: type=docker,dest=/tmp/myimage.tar
      -
        name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: myimage
          path: /tmp/myimage.tar

  code-review:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/python-3.8@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  test:
    runs-on: ubuntu-latest
    needs: 
      - build
      - code-review
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - 
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}"
      - 
        name: Run unit test
        run: |
          docker run --rm --name test krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} sh -c "flask test"

  push-image:
    runs-on: ubuntu-latest
    needs: 
      - build
      - test
    steps:
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      -
        name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: myimage
          path: /tmp
      -
        name: Load Docker image
        run: |
          docker load --input /tmp/myimage.tar
          docker image ls -a
      - 
        name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: Generate build ID
        id: prep
        run: |
            branch=${GITHUB_REF##*/}
            sha=${GITHUB_SHA::8}
            echo "::set-output name=BUILD_ID::${branch}-${sha}"
      -
        name: push image
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
            docker tag krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} krojas4/my-api:latest
            docker push krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
            docker push krojas4/my-api:latest
      -
        name: push image
        if: ${{ github.ref == 'refs/heads/development' }}
        run: |
            docker tag krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }} krojas4/my-api:-development-latest
            docker push krojas4/my-api:${{ steps.prep.outputs.BUILD_ID }}
            docker push krojas4/my-api:development-latest